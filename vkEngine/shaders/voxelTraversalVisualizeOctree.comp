#version 450

struct OctreeNode {
    int p0;
    int p1;
    int p2;
    int p3;
    int p4;
    int p5;
    int p6;
    int p7;
};

layout(binding = 0) uniform ParameterUBO {
    vec3 camPos;
    vec3 camDir;
    vec3 camUp;
    vec3 sunDir;

    float deltaTime;
    int screenWidth;
    int screenHeight;
    int octreeSize;
    int octreeMaxDepth;
} ubo;

layout(std140, binding = 1) readonly buffer OctreeSSBO {
    OctreeNode octreeArray[];
} octree;

layout(binding = 2, rgba8) uniform writeonly image2D outputImage;

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

float aspectRatio = float(ubo.screenWidth) / float(ubo.screenHeight);
float focalLength = 4.0;
float viewportHeight = 2.0;
float viewportWidth = viewportHeight * aspectRatio;
float viewportV = viewportHeight / float(ubo.screenHeight);
float viewportU = viewportWidth / float(ubo.screenWidth);

vec3 camRight = -normalize(cross(ubo.camDir, ubo.camUp));
vec3 viewportCenter = ubo.camPos + ubo.camDir * focalLength;
vec3 topLeft = viewportCenter + ubo.camUp * 0.5 * viewportHeight - camRight * 0.5 * viewportWidth;

int OCTREE_SIZE = ubo.octreeSize;
int max_depth = ubo.octreeMaxDepth;
const int MAX_DEPTH = 100;
const int MAX_TRAVERSALS = 300;
const float INF = 1.0 / 0.0;


float intersectRayPlane(vec3 rayOrigin, vec3 rayDirection, vec3 planeNormal, float planeD) {
    float denom = dot(planeNormal, rayDirection);
    if (abs(denom) > 0.0000000001) // your favorite epsilon
    {
        float t = dot((planeD - rayOrigin), planeNormal) / denom;
        return t;
    }
    return -1;
}

bool voxelInParent(vec3 child, ivec3 parent, ivec3 parentEnds) {
    return (child.x >= parent.x && child.x <= parentEnds.x &&
        child.y >= parent.y && child.y <= parentEnds.y &&
        child.z >= parent.z && child.z <= parentEnds.z);
}

float getDelta(float curPos, float curVoxelPos, float dir, int voxelSize) {
    float nextPos;
    if (voxelSize == 1) {
        if (dir > 0) {
            return (curVoxelPos + 1 - curPos) / dir;
        }
        else if (dir < 0) {
            return (curVoxelPos - curPos) / dir;
        }
        else {
            return INF;
        }
    }
    if (dir > 0) {
        nextPos = (floor(curVoxelPos / voxelSize)) * voxelSize + voxelSize;
    }
    else if (dir < 0) {
        nextPos = (floor(curVoxelPos / voxelSize)) * voxelSize;
    }
    else {
        return INF;
    }
    return (nextPos - curPos) / dir;
}

ivec3 scaleVoxel(ivec3 origVoxel, int scaleSize) {
    ivec3 scaledVoxel;
    scaledVoxel.x = scaleSize * int(floor(origVoxel.x / scaleSize));
    scaledVoxel.y = scaleSize * int(floor(origVoxel.y / scaleSize));
    scaledVoxel.z = scaleSize * int(floor(origVoxel.z / scaleSize));
    return scaledVoxel;
}

ivec3 roundVoxel(vec3 origVoxel, int scaleSize) {
    ivec3 scaledVoxel;
    scaledVoxel.x = scaleSize * int(floor(origVoxel.x / scaleSize));
    scaledVoxel.y = scaleSize * int(floor(origVoxel.y / scaleSize));
    scaledVoxel.z = scaleSize * int(floor(origVoxel.z / scaleSize));
    return scaledVoxel;
}

ivec2 traverseOctreeVisualize(vec3 curPos, vec3 dir, int parentVoxelSize, ivec3 curVoxel, ivec3 parentVoxel, int initialIndex, int collType) {
    float deltaX;
    float deltaY;
    float deltaZ;
    float minDelta;

    int curDepth = 0;

    int nodeIndices[MAX_DEPTH];
    nodeIndices[curDepth] = initialIndex;

    ivec3 parentVoxels[MAX_DEPTH];
    parentVoxels[curDepth] = parentVoxel;

    int voxelSize = parentVoxelSize / 2;

    int traversals = 0;

    for (int i = 0; i < MAX_TRAVERSALS; i++) {
        int subNodeValue = nodeIndices[curDepth];
        int j = 0;
        while (subNodeValue >= 0 && curDepth < MAX_DEPTH) {
            traversals++;

            if (j++ > MAX_DEPTH) {          // for some reason this fixes framerate drop when entering octree 128x128 or larger
                return ivec2(traversals, collType);
            }

            parentVoxels[curDepth] = scaleVoxel(curVoxel, parentVoxelSize);
            ivec3 curVoxelScaled = scaleVoxel(curVoxel, voxelSize);

            if (curVoxelScaled.x == parentVoxels[curDepth].x) {
                if (curVoxelScaled.y == parentVoxels[curDepth].y) {
                    if (curVoxelScaled.z == parentVoxels[curDepth].z) {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p0; //000
                    }
                    else {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p1; //001
                    }
                }
                else {
                    if (curVoxelScaled.z == parentVoxels[curDepth].z) {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p2; //010
                    }
                    else {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p3; //011
                    }
                }
            }
            else {
                if (curVoxelScaled.y == parentVoxels[curDepth].y) {
                    if (curVoxelScaled.z == parentVoxels[curDepth].z) {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p4; //100
                    }
                    else {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p5; //101
                    }
                }
                else {
                    if (curVoxelScaled.z == parentVoxels[curDepth].z) {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p6; //110
                    }
                    else {
                        subNodeValue = octree.octreeArray[nodeIndices[curDepth]].p7; //111
                    }
                }
            }

            if (curDepth + 1 == MAX_DEPTH) {
                if (subNodeValue < -1) {
                    return ivec2(traversals, collType);
                }
                else {
                    curDepth++;
                    parentVoxelSize /= 2;
                    voxelSize /= 2;
                    break;
                }
            }
            nodeIndices[curDepth + 1] = subNodeValue;

            curDepth++;
            parentVoxelSize /= 2;
            voxelSize /= 2;
        }

        if (nodeIndices[curDepth] < -1) {
            return ivec2(traversals, collType);
        }

        if (curDepth > 0) {
            curDepth--;
            parentVoxelSize *= 2;
            voxelSize *= 2;
        }

        if (parentVoxelSize != 2 * voxelSize) {
            voxelSize = parentVoxelSize / 2;
        }

        deltaX = getDelta(curPos.x, curVoxel.x, dir.x, voxelSize);
        deltaY = getDelta(curPos.y, curVoxel.y, dir.y, voxelSize);
        deltaZ = getDelta(curPos.z, curVoxel.z, dir.z, voxelSize);

        minDelta = min(min(deltaX, deltaY), deltaZ);

        curPos += minDelta * dir;

        vec3 curPosi = curPos;

        if (minDelta == deltaX) {
            curPosi.x += 0.01 * dir.x;
            curVoxel = roundVoxel(curPosi, 1);

            if (dir.x > 0) {
                collType = 0;
            }
            else {
                collType = 1;
            }
        }
        else if (minDelta == deltaY) {
            curPosi.y += 0.01 * dir.y;
            curVoxel = roundVoxel(curPosi, 1);


            if (dir.y > 0) {
                collType = 2;
            }
            else {
                collType = 3;
            }
        }
        else if (minDelta == deltaZ) {
            curPosi.z += 0.01 * dir.z;
            curVoxel = roundVoxel(curPosi, 1);


            if (dir.z > 0) {
                collType = 4;
            }
            else {
                collType = 5;
            }
        }
        else {
            return ivec2(traversals, -10);
        }

        ivec3 curParentEnds = parentVoxels[curDepth] + ivec3(parentVoxelSize, parentVoxelSize, parentVoxelSize);


        while (!voxelInParent(curPosi, parentVoxels[curDepth], curParentEnds) && curDepth >= 0) {
            curDepth--;
            parentVoxelSize *= 2;
            voxelSize *= 2;
            curParentEnds = parentVoxels[curDepth] + ivec3(parentVoxelSize, parentVoxelSize, parentVoxelSize);
            //return ivec2(-10, -10);
        }

        // if the current voxel is outside of the root voxel, return miss
        if (curDepth < 0) {
            return ivec2(traversals, -1);
            //return ivec2(111, collType);        // why do I hit this when still in root voxel ???
        }
        //return ivec2(-10, -10);
        // if we find the parent of the current voxel, continue

    }
    return ivec2(traversals, -1);
}

ivec2 enterOctree(ivec3 rootNodePos, vec3 rayOrigin, vec3 rayDir, int voxelSize) {
    float xDir = rayDir.x;
    float yDir = rayDir.y;
    float zDir = rayDir.z;
    vec3 xIntersect;
    vec3 yIntersect;
    vec3 zIntersect;
    float xDist;
    float yDist;
    float zDist;

    ivec3 rootNodeEnd = rootNodePos + ivec3(voxelSize, voxelSize, voxelSize);

    if (voxelInParent(rayOrigin, rootNodePos, rootNodeEnd)) {
        int collType;
        ivec3 curVoxel = roundVoxel(rayOrigin, 1);

        float deltaX = getDelta(rayOrigin.x, floor(rayOrigin.x), rayDir.x, 1);
        float deltaY = getDelta(rayOrigin.y, floor(rayOrigin.y), rayDir.y, 1);
        float deltaZ = getDelta(rayOrigin.z, floor(rayOrigin.z), rayDir.z, 1);

        // find smallest distance to a collision plane
        float minDelta = min(min(deltaX, deltaY), deltaZ);

        // move to collision position
        rayOrigin += minDelta * rayDir;

        vec3 curPosi = rayOrigin;

        // increment current voxel position
        if (minDelta == deltaX) {
            curPosi.x += 0.01 * rayDir.x;
            curVoxel = roundVoxel(curPosi, 1);

            //curVoxel.x += int(round(minDelta * rayDir.x));
            if (rayDir.x > 0) { collType = 0; }
            else { collType = 1; }
        }
        else if (minDelta == deltaY) {
            curPosi.y += 0.01 * rayDir.y;
            curVoxel = roundVoxel(curPosi, 1);

            //curVoxel.y += int(round(minDelta * rayDir.y));
            if (rayDir.y > 0) { collType = 2; }
            else { collType = 3; }
        }
        else if (minDelta == deltaZ) {
            curPosi.z += 0.01 * rayDir.z;
            curVoxel = roundVoxel(curPosi, 1);

            //curVoxel.z += int(round(minDelta * rayDir.z));
            if (rayDir.z > 0) { collType = 4; }
            else { collType = 5; }
        }
        return traverseOctreeVisualize(rayOrigin, rayDir, voxelSize, curVoxel, rootNodePos, 0, collType);
    }

    if (xDir > 0) {
        xDist = intersectRayPlane(rayOrigin, rayDir, vec3(1, 0, 0), rootNodePos.x);
    }
    else {
        xDist = intersectRayPlane(rayOrigin, rayDir, vec3(1, 0, 0), rootNodePos.x + voxelSize);
    }
    if (yDir > 0) {
        yDist = intersectRayPlane(rayOrigin, rayDir, vec3(0, 1, 0), rootNodePos.y);
    }
    else {
        yDist = intersectRayPlane(rayOrigin, rayDir, vec3(0, 1, 0), rootNodePos.y + voxelSize);
    }
    if (zDir > 0) {
        zDist = intersectRayPlane(rayOrigin, rayDir, vec3(0, 0, 1), rootNodePos.z);
    }
    else {
        zDist = intersectRayPlane(rayOrigin, rayDir, vec3(0, 0, 1), rootNodePos.z + voxelSize);
    }

    if (xDist < 0) { xDist = INF; }
    if (yDist < 0) { yDist = INF; }
    if (zDist < 0) { zDist = INF; }

    float minDist = INF;


    vec3 xCollision = rayOrigin + xDist * rayDir;
    vec3 ixCollision = xCollision;
    ixCollision.x += 0.001 * rayDir.x;
    if (voxelInParent(ixCollision, rootNodePos, rootNodeEnd)) { minDist = xDist; }

    vec3 yCollision = rayOrigin + yDist * rayDir;
    vec3 iyCollision = yCollision;
    iyCollision.y += 0.001 * rayDir.y;
    if (voxelInParent(iyCollision, rootNodePos, rootNodeEnd)) { minDist = min(minDist, yDist); }

    vec3 zCollision = rayOrigin + zDist * rayDir;
    vec3 izCollision = zCollision;
    izCollision.z += 0.001 * rayDir.z;
    if (voxelInParent(izCollision, rootNodePos, rootNodeEnd)) { minDist = min(minDist, zDist); }

    if (minDist == INF) {
        return ivec2(-1, -1);
    }
    if (minDist == xDist) {
        if (xDir > 0) {
            return traverseOctreeVisualize(xCollision, rayDir, voxelSize, ivec3(floor(ixCollision)), rootNodePos, 0, 0);
        }
        else {
            return traverseOctreeVisualize(xCollision, rayDir, voxelSize, ivec3(floor(ixCollision)), rootNodePos, 0, 1);
        }
    }
    if (minDist == yDist) {
        if (yDir > 0) {
            return traverseOctreeVisualize(yCollision, rayDir, voxelSize, ivec3(floor(iyCollision)), rootNodePos, 0, 2);
        }
        else {
            return traverseOctreeVisualize(yCollision, rayDir, voxelSize, ivec3(floor(iyCollision)), rootNodePos, 0, 3);
        }
    }
    if (minDist == zDist) {
        if (zDir > 0) {
            return traverseOctreeVisualize(zCollision, rayDir, voxelSize, ivec3(floor(izCollision)), rootNodePos, 0, 4);
        }
        else {
            return traverseOctreeVisualize(zCollision, rayDir, voxelSize, ivec3(floor(izCollision)), rootNodePos, 0, 5);
        }
    }

    return ivec2(-1, -1);
}

void main() {
    OctreeNode firstNode = octree.octreeArray[0];

    vec3 sunDir = normalize(vec3(-1, -2, -3));

    float normals[6];
    float ambient = 0.9;
    normals[0] = ambient + dot(vec3(1, 0, 0), sunDir);
    normals[1] = ambient + dot(vec3(-1, 0, 0), sunDir);
    normals[2] = ambient + dot(vec3(0, 1, 0), sunDir);
    normals[3] = ambient + dot(vec3(0, -1, 0), sunDir);
    normals[4] = ambient + dot(vec3(0, 0, 1), sunDir);
    normals[5] = ambient + dot(vec3(0, 0, -1), sunDir);

    uint index = gl_GlobalInvocationID.x;

    int screenX = ubo.screenWidth - int(mod(index, ubo.screenWidth));
    int screenY = ubo.screenHeight - int(floor(index / ubo.screenWidth));

    ivec2 texPos = ivec2(screenX, screenY);

    if (screenX == (ubo.screenWidth / 2) && screenY == (ubo.screenHeight / 2)) {
        imageStore(outputImage, texPos, vec4(1, 1, 0, 1));
        return;
    }

    vec3 pixelCenter = topLeft - (viewportV * ubo.camUp * screenY) + (viewportU * camRight * screenX);

    vec3 rayDir = normalize(pixelCenter - ubo.camPos);
    vec3 rayOrigin = ubo.camPos;

    ivec2 matValue = enterOctree(ivec3(0, 0, 0), rayOrigin, rayDir, OCTREE_SIZE);
    vec3 color;
    if (matValue.x == -1) {
        color = vec3(0, 0, 0);
    }

    
    //visualize
    else if (matValue.y >= 0) {
        color = vec3(0.3, 0.3, 0.3) + matValue.x * vec3(0.01, 0.01, 0.01);
    }
    else {
        color = matValue.x * vec3(0.01, 0.01, 0.01);
    }
  

    if (matValue.y < 6) {
        color *= normals[matValue.y];
    }


    imageStore(outputImage, texPos, vec4(color, 1));
}